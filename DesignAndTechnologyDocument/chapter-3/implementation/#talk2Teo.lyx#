#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
The software implemented for the 
\shape italic
Talk2Teo
\shape default
 functionalities are composed by the computer application and control software
 and the arduino firmware that handles the logic that makes possible the
 control and behaviors of Teo.
 A comprehensive description of both parts are provided below.
 Finally, the communication protocol between the PC and Teo is described
 and summarized.
\end_layout

\begin_layout Paragraph
PC
\end_layout

\begin_layout Standard
The PC application is called 
\begin_inset Quotes eld
\end_inset

Teo2Control
\begin_inset Quotes erd
\end_inset

, which provides support both to Teo2's firmware and let the therapist control
 Teo2 through the Xbox 360 controller.
 The application communicates with Teo2 through the Bluetooth connection
 and, also, handles the connection with Bluetooth speaker embedded in Teo2's
 body.
 
\end_layout

\begin_layout Subparagraph
Functionality description
\end_layout

\begin_layout Enumerate

\bar under
Control Teo2
\bar default
: the therapist uses the Xbox controller to directly control Teo2.
 Xbox input is caught and parsed by Teo2Control application which will forward
 the requested command to Teo2 via Bluetooth.
\end_layout

\begin_layout Enumerate

\bar under
Support Teo2:
\bar default
 Teo2 is unable to communicate with Bluetooth speaker, thus to do so it
 has to send a request for the PC to handle the functionality.
 Upon receiving messages from Teo2, Teo2Control will parse them and perform
 actions accordingly.
 This can include send messages back to Teo2 or playback audio files through
 the Bluetooth speaker.
\end_layout

\begin_layout Enumerate

\bar under
Joypad (Xbox 360 controller) configuration:
\bar default
 this is a functionality that allows the therapist to assign to each button
 of the controller a specific function.
 Said functionality is provided through the GUI 
\begin_inset Quotes eld
\end_inset

Teo2Setting
\begin_inset Quotes erd
\end_inset

 that allows to choose between three pre-defined presets or to make a custom
 configuration.
 
\end_layout

\begin_layout Subparagraph
Architecture description
\end_layout

\begin_layout Standard
Teo2 Control uses an event based architecture, its different components
 communicates through events (such as the input received from Xbox 360 controlle
r or the commands/messages received through the Bluetooth).
 This architecture permits the application to be fully scalable as each
 function or method is independent from the others.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../img/teo2ControlAppArchitecture.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Talk2Teo arhitecture
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:image-1-4-2-3-1-4-1-1-1"

\end_inset

High level architecture of 
\shape italic
Talk2Teo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subparagraph
UML models
\end_layout

\begin_layout Standard
The PC application Teo2Control component diagram and sequence diagram are
 described to help better understand the structure and functionality of
 this application.
\end_layout

\begin_layout Enumerate
BTManager.
 This component is responsible of receiving and sending Bluetooth messages.
 Anytime a message is received from the Bluetooth serial port connected
 to Teo2 it will raise an event and alert the Parser.
 BTManager also manages the outgoing messages decided by the Parser.
\end_layout

\begin_layout Enumerate
XBManager.
 This component is responsible of receiving Xbox 360 controller input.
 Anytime an input is received from the Xbox 360 controller it will raise
 an event and alert the Parser.
\end_layout

\begin_layout Enumerate
Parser.
 This is the logic of Teo2 Control.
 It decides which action to take depending on the input received.
 When the decision is made it will raise an event alerting the BTManager.
 Teo2Control will follow the indications provided by an XML file, which
 maps every key to a command.
 Using 
\begin_inset Quotes eld
\end_inset

Teo2Setting
\begin_inset Quotes erd
\end_inset

 GUI this XML file is generated according to the mapping of functions selected
 by the user.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../img/teo2ControlAppComponentDiagram.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Talk2Teo components diagram
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:image-1-4-2-3-1-4-1-1-1-1"

\end_inset

UML components diagram of Teo2Control
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The communication between the components described in Figure 3.13 are handled
 by a set of buffers, that is, incoming and outgoing messages, resulting
 both from the use of the joypad and the Bluetooth data, are stored in shared
 buffers to which each component accesses when a determined event is raised.
 For example, if a message is received from the Bluetooth port connected
 to Teo2-BTManager, this last one will push it in the BT input buffer and
 raise an event to alert the Parser, that will finally pop the message from
 that buffer.
 The same 
\begin_inset Newline newline
\end_inset

The system uses three buffers:
\end_layout

\begin_layout Itemize
BT input buffer: it transmits messaged received to the Parser to handle.
\end_layout

\begin_layout Itemize
BT output buffer: it conveys the result of the Parser to the BTManager to
 output a message for Teo2.
\end_layout

\begin_layout Itemize
XB input buffer: it contains the input coming from the use of the joypad
 to be read and processed by the Parser.
\end_layout

\begin_layout Standard
This dynamic of the communication between this components through these
 structures are describe by the sequence diagram in Figure 3.14.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../img/teo2ControlAppSequenceDiagram1.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Talk2Teo sequence diagram 1
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:image-1-4-2-3-1-4-1-1-1-1-1"

\end_inset

Diagram describing the workflow of the system in the case in which the user
 is using the Xbox controller to control Teo2.
 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../img/teo2ControlAppSequenceDiagram2.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Talk2Teo sequence diagram 2
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:image-1-4-2-3-1-4-1-1-1-1-1-1"

\end_inset

Since the Arduino board inside Teo2 is unable to communicate with the Bluetooth
 speaker it requires a computer to play the audio files for it.
 This diagrams describe the process with which Teo2 plays an audio file.
 2.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Teo2's Firmware
\end_layout

\begin_layout Standard
In order to handle the multiple-inputs system that is Teo2, the finite state
 machine presented in the Figure 3.16 was implemented.
 This machine was designed to be able to handle the functionalities required
 by the Talk2Teo scenario; namely, to handle manual commands coming from
 the PC control application (i.e.
 the result of the joypad control) and the triggering of the automatic behaviors
 for Teo.
 The two main characteristics was to allow for actuation and sensing control
 in a non-blocking manner and also with the intention to allow easy addition
 of new automatic behaviors, manual commands and sensing capabilities.
 Following the tasks realized for each state are explained.
\end_layout

\begin_layout Itemize
Sense: this state handles the functions to update the state of Teo through
 its sensors.
 For which it collects information from distance sensors, pressure sensors,
 microphones, accelerometer/gyroscope, etc., processes it and updates state
 variables that serve to have a model of part of the environment as region
 of interaction (i.e.
 intimate, personal, social, etc), contact type (hit/hug), sound localization.
 Also, update counters that keep track of time for scheduled tasks such
 as face animations and message sending.
 Moreover, it also polls for new communication data.
\end_layout

\begin_layout Itemize
Verify rules: if no manual command was received while in the sense state,
 
\begin_inset Quotes eld
\end_inset

Verify rules
\begin_inset Quotes erd
\end_inset

 is executed and it verifies the satisfaction of some rules that are above
 all automatic behaviors.
 This rules are thought, mainly, for safety such as stop motion when an
 obstacle is detected to be close enough and stop movements when a hit is
 detected.
\end_layout

\begin_layout Itemize
Choose behavior: this state is executed after 
\begin_inset Quotes eld
\end_inset

Verify rules
\begin_inset Quotes erd
\end_inset

 when no automatic behavior is being executed.
 When executed, in a priority-based manner, the conditions for the triggering
 of a behavior are checked.
 Whenever a condition is satisfied for a behavior to execute, the control
 is given to the 
\begin_inset Quotes eld
\end_inset

Auto execute
\begin_inset Quotes erd
\end_inset

 state.
 When no behavior is selected, then the control is given back to the 
\begin_inset Quotes eld
\end_inset

Sense
\begin_inset Quotes erd
\end_inset

 state.
\end_layout

\begin_layout Itemize
Auto execute: this state is reached after 
\begin_inset Quotes eld
\end_inset

Choose Behavior
\begin_inset Quotes erd
\end_inset

 if the conditions are satisfied to trigger a behavior or from the 
\begin_inset Quotes eld
\end_inset

Verify rules
\begin_inset Quotes erd
\end_inset

 state when the machine is already executing an automatic behavior.
 In this case, the function that handles the behaviors is invoked and then
 gets back to the 
\begin_inset Quotes eld
\end_inset

Sense
\begin_inset Quotes erd
\end_inset

 state.
\end_layout

\begin_layout Itemize
Manual execute: this state is called when in the 
\begin_inset Quotes eld
\end_inset

Sense
\begin_inset Quotes erd
\end_inset

 state a command is received and no automatic behavior is currently executing.
 In this case, the command executer is invoked.
 In this case, the state machine will remained in this state until the manual
 command has finished executing, in which case it the gives back the control
 to the 
\begin_inset Quotes eld
\end_inset

Sense
\begin_inset Quotes erd
\end_inset

 state.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../img/talk2TeoFSM.png
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Talk2Teo final state machine
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:image-1-4-2-3-1-4-1-1"

\end_inset

State machine of Talk2Teo logic
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This firmware for Talk2Teo was implemented in such a way to allow for an
 easy insertion into a more complex logic, mainly, to integrate the Talk2Teo
 functionalities with future ones.
 Furthermore, for extending the manual commands and the automatic behaviors,
 also the state machine structure was exploited.
 Henceforth, for implementing new behaviors is simply a matter to implement
 two functions.
 The first one that would be called in the 
\begin_inset Quotes eld
\end_inset

Choose behavior
\begin_inset Quotes erd
\end_inset

 state that will check the conditions for execution and decide whether is
 possible, if so it will simply set a function pointer and realize the initializ
ation process for the execution of the behavior.
 The second one will be a machine state that will contain the logic to handle
 the actions that compose the behaviors.
\end_layout

\begin_layout Standard
Similarly, for the manual com
\end_layout

\begin_layout Paragraph
Communication protocol
\end_layout

\begin_layout Standard
To communicate with Teo2 a set of fixed commands is used, this set defines
 a protocol of communication between Teo2 and the computer application.
 In Table 3.6 the protocol of messages from the PC to Teo are listed and
 explained.
 Similarly, in the Table 3.7 the messages from Teo2 to the PC are shown.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Command
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
move x y z
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Move at forward speed x (in m/s), 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
strafe y (in m/s) and angular z (in rad/s)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
happy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Happy mood
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Sad mood
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
scared
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Scared mood
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set Angry mode
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
auto on/off
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Toggle automatic behaviors
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
idle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set idle state
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
end of sound
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Communicate end of playing sounds
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Teo 2 protocol PC-Teo2
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:formal-table-1-2-2-2"

\end_inset

The main commands from PC to Teo2
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Command
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ready
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teo2 is on and ready to start communication
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
end motion
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teo2 has ended automatic movements
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
say x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teo2 requests to say a certain word/phrase x
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Teo 2 protocol Teo2-PC
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:formal-table-1-2-2-2-2"

\end_inset

The main commands from Teo2 to PC
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When Teo2 is switched on and for all the duration of the session it will
 send “ready” via Bluetooth, this message is caught by Teo2 Control which
 will establish the connection.
 If no “ready” message is received the program will close.
 Notice that each of the PC to Teo2 commands can be set in the XML files
 corresponding to the preset but Teo2 sketch has to be changed too in order
 to recognise new commands.
\end_layout

\end_body
\end_document
